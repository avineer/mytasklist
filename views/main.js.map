{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/services/task.service.ts","webpack:///./src/app/tasks/tasks.component.css","webpack:///./src/app/tasks/tasks.component.html","webpack:///./src/app/tasks/tasks.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <h1>My Task List</h1>\\n  <hr>\\n  <app-tasks></app-tasks>\\n</div>\\n\"","import { TaskService } from './services/task.service';\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  providers: [TaskService]\n})\nexport class AppComponent {\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {HttpModule} from '@angular/http';\nimport {FormsModule} from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { TasksComponent } from './tasks/tasks.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TasksComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { Http, Headers } from '@angular/http';\nimport { Observable, Subject, ReplaySubject, from, of, range } from 'rxjs';\nimport { map, filter, switchMap } from 'rxjs/operators';\n//import {Observable} from 'rxjs';\n//import { map, switchMap, catchError, mergeMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n\n  constructor(private http:Http) {\n    console.log('Task Service Initilized...');\n   }\n\n   getTasks(){\n    return this.http.get(\"/api/tasks\").pipe(map(response => response.json()));\n   }\n\n   addTask(newTask){\n    var headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    return this.http.post(\"/api/tasks\",JSON.stringify(newTask), {headers: headers})\n      .pipe(map(response => response.json()));\n   }\n\n   deleteTask(id){\n     return this.http.delete(\"/api/tasks/\" + id)\n     .pipe(map(response => response.json()));\n   }\n\n   updateStatus(task){\n    var headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    return this.http.put(\"/api/tasks/\"+task._id, JSON.stringify(task), {headers: headers})\n      .pipe(map(response => response.json()));    \n   }\n}\n","module.exports = \"\"","module.exports = \"<form class=\\\"well\\\" (submit)=\\\"addTask($event)\\\" >\\n    <div class=\\\"form-group\\\">\\n      <input type=\\\"text\\\" [(ngModel)]=\\\"title\\\" name=\\\"title\\\" class=\\\"form-control\\\" placeholder=\\\"Add Task...\\\">\\n    </div>\\n\\n    <div class=\\\"task-list\\\">\\n      <div *ngFor=\\\"let task of tasks\\\">\\n        <div class=\\\"col-md-1\\\">\\n          <input type=\\\"checkbox\\\" [checked]=\\\"task.isDone\\\" (click)=\\\"updateStatus(task)\\\" >\\n        </div>\\n        <div class=\\\"col-md-7\\\">\\n          {{task.title}}\\n        </div>\\n        <div clas=\\\"col-md-4\\\">\\n          <input type=\\\"button\\\" (click)=\\\"deleteTask(task._id)\\\" value=\\\"Delete\\\" class=\\\"btn btn-danger\\\">\\n        </div>\\n      </div>\\n    </div>\\n\\n</form>\\n\"","\nimport { TaskService } from './../services/task.service';\nimport { Component, OnInit } from '@angular/core';\nimport {Task} from '../../../task';\n\n@Component({\n  selector: 'app-tasks',\n  templateUrl: './tasks.component.html',\n  styleUrls: ['./tasks.component.css']\n})\nexport class TasksComponent implements OnInit {\n\n  tasks: Task[];\n  title: string;\n\n  constructor(private taskService:TaskService) { \n    this.taskService.getTasks()\n      .subscribe(tasks => {\n        this.tasks = tasks;\n      });\n  }\n\n  addTask(event){\n    event.preventDefault();\n    var newTask = {\n      title: this.title,\n      isDone: false\n    }\n\n    this.taskService.addTask(newTask)\n      .subscribe(task => {\n        this.tasks.push(task);\n        this.title = '';\n      });\n  }\n\n  deleteTask(id){\n    var tasks = this.tasks;\n\n    this.taskService.deleteTask(id).subscribe(data => {\n      if(data.n == 1){\n        for(var i=0; i < tasks.length; i++){\n          if(tasks[i]._id == id){\n            tasks.splice(i, 1);\n          }\n        }\n      }\n    });\n  }\n\n  updateStatus(task){\n    var _task = {\n      _id: task._id,\n      title: task.title,\n      isDone: !task.isDone \n    };\n    this.taskService.updateStatus(_task).subscribe(data => {\n      task.isDone = !task.isDone;\n    });\n  }\n \n  ngOnInit() {\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}